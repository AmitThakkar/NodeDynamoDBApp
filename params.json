{
  "name": "Nodedynamodbapp",
  "tagline": "this repository for containing the Demo Application for NodeJS which connect with DynamoDB.",
  "body": "#Node Dynamo DB App\r\n\r\nThis repository contains Demo Application for NodeJS which connects with DynamoDB.\r\n\r\nAs we know, **Dynamo** is fast, scalable, highly available **AWS NoSQL Database Service**. Although we have many other databases which are also fast, scalable and good enough, but for scaling/sharding the database, we must have good knowledge of that database, or we must have expert DBA for managing the our database.\r\n\r\nThat is not the case with **DynamoDB**. When we are working with **DynamoDB**, we don't have to care about the creating the replica, sharding the database or select the shard-key etc. All headache related to scalling/sharding purpose is already handled in **AWS Dynamo Database Service**. We have to just consume **AWS Dynamo Database Service** and concentrate on our project development, instead of spending lots of time on all this DBA related stuff.\r\n\r\nYou can checkout more about **Dynamo DB** form this [link](http://aws.amazon.com/dynamodb/).\r\n\r\nThat's enough for theory part, now lets move to practical. Lets make a basic demo application with **NodeJS**, which will communicate with **AWS DynamoDB Database Service**.\r\n\r\nFor this demo application, we are connecting with local **DynamoDB**. To install **DynamoDB** locally follow this [link](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tools.DynamoDBLocal.html).\r\n\r\n**Tip**: First checkout full working source code from this [link](https://github.com/AmitThakkar/NodeDynamoDBApp), and try to run. When you will run you will see output like this:\r\n```bash\r\nList Of Tables [ 'OrderLog' ]\r\nTable  OrderLog  Dropped!\r\nTable  OrderLog  Created!\r\nRow  {\"Item\":{\"order_id\":{\"N\":\"1234\"},\"order_body\":{\"S\":\"{a:34, b:34}\"}},\"TableName\":\"OrderLog\"}  Inserted!\r\nResult:  { '0': undefined,\r\n  '1': [ undefined, undefined, undefined, undefined ] }\r\n```\r\n\r\n**Note**: If your are facing error while running the **DynamoDBTest.js** file which looks like:\r\n```bash\r\nexception when clearing com.almworks.sqlite4java.SQLiteException: [8] DB[1] reset [attempt to write a readonly database]\r\n```\r\nthen **DynamoDB** is not having permission to write things to that particular directory/folder. So I will suggest run **DynamoDB** in home directory or run **DynamoDB** with sudo permission. And if you are running application second time then un-comment below code, so program can delete table first before creating again, otherwise it will throw an error for creating same table again.\r\n```javascript\r\ntasks.push(function (callback) {\r\n  dynamoDB.deleteTable({TableName: tableName}, function (error) {\r\n    if (error) {\r\n      console.log(\"Error: \", error, error.stack);\r\n      callback(error);\r\n    } else {\r\n      console.log(\"Table \", tableName, \" Dropped!\");\r\n      callback(null);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nLets understand what is happening into **DynamoDBTest.js** file? Open **DynamoDBTest.js** file into your favorite Editor, and you will find everything into comments which is require to enough to explain the code.\r\n```javascript\r\n/**\r\n * Created by Amit Thakkar on 17/9/14.\r\n */\r\n(function () {\r\n  /*\r\n   * Define Configuration Here.\r\n   * To Connect with Local DynamoDB, We are providing dummy entries\r\n   * for required fields(accessKey, Secret and Region).\r\n   * To Connect with AWS DynamoDB Service place actual accessKey, Secret and Region.\r\n   * */\r\n  var dynamoDBConfiguration = {\r\n    \"accessKeyId\": \"DummyKeyForLocalDynamoDB\",\r\n    \"secretAccessKey\": \"DummySecretAccessKeyForLocalDynamoDB\",\r\n    \"region\": \"eu-west-1\"\r\n  };\r\n\r\n  // requiring aws-sdk, async\r\n  var AWS = require('aws-sdk');\r\n  var async = require('async');\r\n\r\n  // For Local DynamoDB define endpoint will be \"http://localhost:8000\"\r\n  var databaseConfig = {\"endpoint\": new AWS.Endpoint(\"http://localhost:8000\")};\r\n\r\n  // provide your configurations\r\n  AWS.config.update(dynamoDBConfiguration);\r\n  // initialize DynamoDB Object.\r\n  var dynamoDB = new AWS.DynamoDB(databaseConfig);\r\n\r\n  var tasks = [];\r\n  var tableName = \"OrderLog\";\r\n  // Listing tables\r\n  tasks.push(function (callback) {\r\n    dynamoDB.listTables(function (error, data) {\r\n      if (error) {\r\n        console.log(\"Error: \", error, error.stack);\r\n        callback(error);\r\n      } else {\r\n        console.log(\"List Of Tables\", data.TableNames);\r\n        callback(null);\r\n      }\r\n    });\r\n  });\r\n  /*\r\n   * Deleting Table\r\n   * When running first time remove this task as Table will not be present\r\n   * And it might be throwing an Error.\r\n   * */\r\n  /*tasks.push(function (callback) {\r\n    dynamoDB.deleteTable({TableName: tableName}, function (error) {\r\n      if (error) {\r\n        console.log(\"Error: \", error, error.stack);\r\n        callback(error);\r\n      } else {\r\n        console.log(\"Table \", tableName, \" Dropped!\");\r\n        callback(null);\r\n      }\r\n    });\r\n  });*/\r\n  // Creating Table\r\n  tasks.push(function (callback) {\r\n    // Describe table here.\r\n    var table = {\r\n      AttributeDefinitions: [ // Defining Primary Key\r\n        {\r\n          AttributeName: 'order_id',\r\n          AttributeType: 'N'\r\n        }\r\n        // Define Secondary key here.\r\n      ],\r\n      KeySchema: [ // Defining Key Type Here.\r\n        {\r\n          AttributeName: 'order_id',\r\n          KeyType: 'HASH'\r\n        }\r\n        // Define Secondary Key Type Here.\r\n      ],\r\n      // Define read per second and write per second here.\r\n      ProvisionedThroughput: {\r\n        ReadCapacityUnits: 1,\r\n        WriteCapacityUnits: 5\r\n      },\r\n      TableName: tableName // table Name\r\n    };\r\n    dynamoDB.createTable(table, function (error, data) {\r\n      if (error) {\r\n        console.log(\"Error: \", error, error.stack);\r\n        callback(error);\r\n      } else {\r\n        console.log(\"Table \", tableName, \" Created!\");\r\n        callback(null);\r\n      }\r\n    });\r\n  });\r\n  // Insert/Update a row\r\n  tasks.push(function (callback) {\r\n    var params = {\r\n      Item: {\r\n        order_id: {\r\n          N: '1234'\r\n        },\r\n        order_body: {\r\n          S: \"{a:34, b:34}\"\r\n        }\r\n      },\r\n      TableName: tableName\r\n    };\r\n    dynamoDB.putItem(params, function (error, data) {\r\n      if (error) {\r\n        console.log(\"Error: \", error, error.stack);\r\n        callback(error);\r\n      } else {\r\n        console.log(\"Row \", JSON.stringify(params), \" Inserted!\");\r\n        callback(null);\r\n      }\r\n    });\r\n  });\r\n  async.series(tasks, function (error, result) {\r\n    console.log(\"Result: \", arguments);\r\n  });\r\n})();\r\n```\r\n\r\n**Note**: You can checkout full working source code from this [link](https://github.com/AmitThakkar/NodeDynamoDBApp).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}